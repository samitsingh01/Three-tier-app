name: CI-CD-Full
permissions:
  contents: read
  security-events: write  # Needed for CodeQL SAST
on:
  push:
    branches:
      - main

jobs:
  # ---------------- Backend Linting ----------------
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run backend lint
        run: flake8 ./backend || true  # Wonâ€™t fail workflow

  # ---------------- Frontend Linting ----------------
  frontend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install frontend dependencies
        run: npm install
      - name: Run frontend lint
        run: npm run lint || true  # Make sure package.json has lint script

  # ---------------- Backend SCA (Snyk) ----------------
  backend-sca:
    runs-on: ubuntu-latest
    needs: backend-lint
    steps:
      - uses: actions/checkout@v3
      - name: Install Snyk
        run: npm install -g snyk
      - name: Run Snyk scan
        run: snyk test --all-projects --severity-threshold=high

  # ---------------- Frontend SCA (Snyk) ----------------
  frontend-sca:
    runs-on: ubuntu-latest
    needs: frontend-lint
    steps:
      - uses: actions/checkout@v3
      - name: Install Snyk
        run: npm install -g snyk
      - name: Run Snyk scan
        run: snyk test --all-projects --severity-threshold=high

  # ---------------- Backend SAST (CodeQL) ----------------
  backend-sast:
    runs-on: ubuntu-latest
    needs: backend-sca
    steps:
      - uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  # ---------------- Frontend SAST (CodeQL) ----------------
  frontend-sast:
    runs-on: ubuntu-latest
    needs: frontend-sca
    steps:
      - uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  # ---------------- Backend Docker Build & Trivy Scan ----------------
  backend-build-and-push:
    runs-on: ubuntu-latest
    needs: backend-sast
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/3-tier-app-backend:latest
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/3-tier-app-backend:latest
          severity: CRITICAL,HIGH
          ignore-unfixed: false

  # ---------------- Frontend Docker Build & Trivy Scan ----------------
  frontend-build-and-push:
    runs-on: ubuntu-latest
    needs: frontend-sast
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/3-tier-app-frontend:latest
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/3-tier-app-frontend:latest
          severity: CRITICAL,HIGH
          ignore-unfixed: false

  # ---------------- Kubernetes Deployment ----------------
  k8s-staging-deploy:
    runs-on: self-hosted
    needs:
      - backend-build-and-push
      - frontend-build-and-push
    steps:
      - uses: actions/checkout@v3
      - name: Apply Kubernetes manifests to staging
        run: kubectl apply -f k8s/staging/
      - name: Restart deployments/statefulsets
        run: kubectl rollout restart deployment,statefulset

  # ---------------- DAST (OWASP ZAP) ----------------
  dast-scan:
    runs-on: ubuntu-latest
    needs: k8s-staging-deploy
    steps:
      - uses: actions/checkout@v3
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://staging.your-app.com'  # replace with staging URL
          cmd_options: '-r zap-report.html'
